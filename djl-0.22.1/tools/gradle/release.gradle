tasks.register('release') {
    doLast {
        def collection = fileTree("jupyter").filter { it.name.endsWith(".ipynb") }
        collection += files("examples/build.gradle", "examples/pom.xml")
        collection.each { File file ->
            file.text = file.text.replaceAll("-SNAPSHOT", "").replaceAll("\"%mavenRepo", "\"// %mavenRepo")
        }
    }
}

tasks.register('staging') {
    doLast {
        if (!project.hasProperty("stagingRepo")) {
            throw new GradleException("stagingRepo property is required.")
        }
        def stagingRepo = project.property("stagingRepo")

        def collection = fileTree("jupyter").filter { it.name.endsWith(".ipynb") }
        collection += files("examples/build.gradle", "examples/pom.xml")
        collection.each { File file ->
            file.text = file.text.replaceAll("https://oss\\.sonatype\\.org/content/repositories/snapshots/",
                    "https://oss.sonatype.org/service/local/repositories/${stagingRepo}/content/")
                    .replaceAll("-SNAPSHOT", "")
                    .replaceAll("//\\s*%mavenRepo snapshots", "%mavenRepo snapshots")
        }
    }
}

tasks.register('increaseBuildVersion') {
    doLast {
        if (!project.hasProperty("targetVersion")) {
            throw new GradleException("targetVersion property is required.")
        }
        def targetVersion = project.property("targetVersion")

        def file = new File("examples/pom.xml")
        file.text = file.text.replaceAll("<djl.version>.+-SNAPSHOT</djl.version>",
                "<djl.version>${targetVersion}-SNAPSHOT</djl.version>")
        file.text = file.text.replaceAll("<version>.+-SNAPSHOT</version>",
                "<version>${targetVersion}-SNAPSHOT</version>")

        file = new File("gradle.properties")
        file.text = file.text.replaceAll("djl_version=[0-9.]+", "djl_version=${targetVersion}")

        file = new File("api/README.md")
        file.text = file.text.replaceAll("<version>.+-SNAPSHOT</version>",
                "<version>${targetVersion}-SNAPSHOT</version>")
    }
}

tasks.register('increaseFinalVersion') {
    doLast {
        if (!project.hasProperty("previousVersion")) {
            throw new GradleException("previousVersion property is required.")
        }
        def previousVersion = project.property("previousVersion")

        def collection = fileTree("jupyter").filter { it.name.endsWith(".ipynb") }
        collection += fileTree(".").filter {
            it.name.endsWith(".md") || it.name.endsWith("overview.html")
        }

        collection.each { File file ->
            file.text = file.text.replaceAll("/${previousVersion}/", "/${djl_version}/")
                    .replaceAll(">${previousVersion}<", ">${djl_version}<")
                    .replaceAll("'${previousVersion}'", "'${djl_version}'")
                    .replaceAll("-${previousVersion}", "-${djl_version}")
                    .replaceAll("_${previousVersion}", "_${djl_version}")
                    .replaceAll(":${previousVersion}([\"\\\\\\n])", ":${djl_version}\$1")
        }
    }
}

