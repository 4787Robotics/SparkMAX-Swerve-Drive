group "ai.djl.mxnet"

dependencies {
    api project(":api")

    testImplementation project(":basicdataset")
    testImplementation project(":model-zoo")
    testImplementation(project(":testing"))

    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated-src']
        }
    }
}

processResources {
    doFirst {
        def classesDir = file("${project.buildDir}/classes/java/main/")
        classesDir.mkdirs()
        def file = new File(classesDir, "mxnet-engine.properties")
        file.text = "djl_version=${djl_version}\nmxnet_version=${mxnet_version}"
    }
}

checkstyleMain.source = 'src/main/java'
pmdMain.source = 'src/main/java'

tasks.register('jnarator') {
    dependsOn ":engines:mxnet:jnarator:jar"
    outputs.dir "${project.buildDir}/generated-src"
    doLast {
        File jnaGenerator = project(":engines:mxnet:jnarator").jar.outputs.files.singleFile
        javaexec {
            mainClass = "-jar"
            args = [
                    jnaGenerator.absolutePath,
                    "-l",
                    "mxnet",
                    "-p",
                    "ai.djl.mxnet.jna",
                    "-o",
                    "${project.buildDir}/generated-src",
                    "-m",
                    "${project.projectDir}/src/main/jna/mapping.properties",
                    "-f",
                    "src/main/include/mxnet/c_api.h",
                    "src/main/include/nnvm/c_api.h"
            ]
        }
    }
}

test {
    environment "PATH", "src/test/bin:${environment.PATH}"
}

import java.util.regex.Matcher
import java.util.regex.Pattern

def checkForUpdate(String path, String url) {
    def expected = new URL(url).text
    def actual = new File("${project.projectDir}/src/main/include/${path}").text
    if (!actual.equals(expected)) {
        def fileName = path.replaceAll("[/\\\\]", '_')
        file("${project.projectDir}/build").mkdirs()
        (file("${project.projectDir}/build/${fileName}")).text = expected
        logger.warn("[\033[31mWARN\033[0m ] Header file has been changed in open source project: ${path}.")
    }
}

tasks.register('checkHeaderFile') {
    outputs.files "${project.buildDir}/mxnet_c_api.h", "${project.buildDir}/nnvm_c_api.h"
    doFirst {
        if (gradle.startParameter.offline) {
            logger.warn("[\033[31mWARN\033[0m ] Ignore header validation in offline mode.")
            return
        }

        def mxnetUrl = "https://raw.githubusercontent.com/apache/incubator-mxnet/v1.7.x/"
        checkForUpdate("mxnet/c_api.h", "${mxnetUrl}/include/mxnet/c_api.h")
        def content = new URL("https://github.com/apache/incubator-mxnet/tree/v1.7.x/3rdparty").text

        Pattern pattern = Pattern.compile("href=\"/apache/incubator-tvm/tree/([a-z0-9]+)\"")
        Matcher m = pattern.matcher(content);
        if (!m.find()) {
            throw new GradleException("Failed to retrieve submodule hash for tvm from github")
        }
        String hash = m.group(1);

        def nnvmUrl = "https://raw.githubusercontent.com/apache/incubator-tvm/${hash}"
        checkForUpdate("nnvm/c_api.h", "${nnvmUrl}/nnvm/include/nnvm/c_api.h")
    }
}

sourcesJar.dependsOn(jnarator)
compileJava.dependsOn(jnarator)
javadoc.dependsOn(jnarator)

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "DJL Engine Adapter for Apache MXNet"
                description = "Deep Java Library (DJL) Engine Adapter for Apache MXNet"
                url = "http://www.djl.ai/engines/mxnet/${project.name}"
            }
        }
    }
}
