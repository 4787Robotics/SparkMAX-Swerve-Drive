String ptVersion
if (project.hasProperty("pt_version") && project.property("pt_version") != "") {
    ptVersion = project.property("pt_version")
} else {
    ptVersion = "${pytorch_version}"
}

group "ai.djl.pytorch"
version = ptVersion + "-${djl_version}"
boolean isRelease = project.hasProperty("release") || project.hasProperty("staging")
if (!isRelease) {
    version = ptVersion + "-${djl_version}-SNAPSHOT"
}

compileJava.dependsOn(processResources)

processResources {
    outputs.dir file("${project.buildDir}/classes/java/main/jnilib")
    doFirst {
        String url = "https://publish.djl.ai/pytorch/${ptVersion}/jnilib/${djl_version}"
        def files = [
                "linux-x86_64/cpu/libdjl_torch.so",
                "linux-x86_64/cpu-precxx11/libdjl_torch.so",
                "osx-x86_64/cpu/libdjl_torch.dylib",
                "win-x86_64/cpu/djl_torch.dll"
        ]
        if (ptVersion.startsWith("2.0.")) {
            files.add("linux-aarch64/cpu-precxx11/libdjl_torch.so")
            files.add("linux-x86_64/cu118/libdjl_torch.so")
            files.add("linux-x86_64/cu118-precxx11/libdjl_torch.so")
            files.add("win-x86_64/cu118/djl_torch.dll")
            files.add("osx-aarch64/cpu/libdjl_torch.dylib")
        } else if (ptVersion.startsWith("1.13.")) {
            files.add("linux-aarch64/cpu-precxx11/libdjl_torch.so")
            files.add("linux-x86_64/cu117/libdjl_torch.so")
            files.add("linux-x86_64/cu117-precxx11/libdjl_torch.so")
            files.add("win-x86_64/cu117/djl_torch.dll")
            files.add("osx-aarch64/cpu/libdjl_torch.dylib")
        } else if (ptVersion.startsWith("1.12.")) {
            files.add("linux-aarch64/cpu-precxx11/libdjl_torch.so")
            files.add("linux-x86_64/cu116/libdjl_torch.so")
            files.add("linux-x86_64/cu116-precxx11/libdjl_torch.so")
            files.add("win-x86_64/cu116/djl_torch.dll")
            files.add("osx-aarch64/cpu/libdjl_torch.dylib")
        } else if (ptVersion.startsWith("1.11.")) {
            files.add("linux-aarch64/cpu-precxx11/libdjl_torch.so")
            files.add("linux-x86_64/cu113/libdjl_torch.so")
            files.add("linux-x86_64/cu113-precxx11/libdjl_torch.so")
            files.add("win-x86_64/cu113/djl_torch.dll")
            files.add("osx-aarch64/cpu/libdjl_torch.dylib")
        } else {
            throw new GradleException("Unsupported version: ${ptVersion}.")
        }
        String jnilibDir = "${project.projectDir}/jnilib/${djl_version}"
        files.each { entry ->
            def file = new File("${jnilibDir}/${entry}")
            if (file.exists()) {
                project.logger.lifecycle("prebuilt or cached file found for ${entry}")
            } else {
                String nativeDir = "${project.parent.projectDir}/pytorch-native/jnilib/${djl_version}/"
                def jnilibFile = new File("${nativeDir}/${entry}")
                if (jnilibFile.exists()) {
                    project.logger.lifecycle("Copying " + jnilibFile)
                    copy {
                        from jnilibFile
                        into file.getParent()
                    }
                } else if (!project.hasProperty("jni")) {
                    project.logger.lifecycle("Downloading ${url}/${entry}")
                    file.getParentFile().mkdirs()
                    new URL("${url}/${entry}").withInputStream { i -> file.withOutputStream { it << i } }
                }
            }
        }
        copy {
            from jnilibDir
            into "${project.buildDir}/classes/java/main/jnilib"
        }

        // write properties
        def propFile = file("${project.buildDir}/classes/java/main/jnilib/pytorch.properties")
        propFile.text = "jni_version=${project.version}"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "DJL Engine Adapter for PyTorch"
                description = "Deep Java Library (DJL) Engine Adapter for PyTorch"
                url = "http://www.djl.ai/engines/pytorch/${project.name}"
            }
        }
    }
}

clean.doFirst {
    delete "jnilib"
    delete fileTree(System.getProperty("user.home") + "/.djl.ai/pytorch/") {
        include '**/*djl_torch.*'
    }
}
