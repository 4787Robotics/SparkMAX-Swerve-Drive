group "ai.djl.pytorch"

dependencies {
    api project(":api")

    testImplementation("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }
    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
    testRuntimeOnly project(":engines:pytorch:pytorch-model-zoo")
    testRuntimeOnly project(":engines:pytorch:pytorch-jni")
}

compileJava.dependsOn(processResources)

processResources {
    outputs.file file("${project.buildDir}/classes/java/main/pytorch-engine.properties")
    doFirst {
        def classesDir = file("${project.buildDir}/classes/java/main/")
        classesDir.mkdirs()
        def propFile = new File(classesDir, "pytorch-engine.properties");
        propFile.text = "djl_version=${djl_version}\npytorch_version=${pytorch_version}"
    }
}

test {
    environment "PATH", "src/test/bin:${environment.PATH}"
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "DJL Engine Adapter for PyTorch"
                description = "Deep Java Library (DJL) Engine Adapter for PyTorch"
                url = "http://www.djl.ai/engines/pytorch/${project.name}"
            }
        }
    }
}

clean.doFirst {
    delete fileTree(System.getProperty("user.home") + "/.djl.ai/pytorch/") {
        include '**/*djl_torch.*'
    }
}
