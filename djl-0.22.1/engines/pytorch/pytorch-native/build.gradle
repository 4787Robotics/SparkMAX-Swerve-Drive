plugins {
    id 'maven-publish'
    id 'signing'
}

group = "ai.djl.pytorch"
apply from: file("${rootProject.projectDir}/tools/gradle/cpp-formatter.gradle")

String VERSION = "${pytorch_version}"
if (project.hasProperty("pt_version") && project.property("pt_version") != "") {
    VERSION = project.property("pt_version")
}
boolean isRelease = project.hasProperty("release") || project.hasProperty("staging")
boolean isPrecxx11 = project.hasProperty("precxx11")
boolean isAarch64 = project.hasProperty("aarch64") || System.properties["os.arch"] == "aarch64"

String FLAVOR = "cpu"
if (project.hasProperty("cu11")) {
    if (VERSION.startsWith("1.11.")) {
        FLAVOR = "cu113"
    } else if (VERSION.startsWith("1.12.")) {
        FLAVOR = "cu116"
    } else if (VERSION.startsWith("1.13.")) {
        FLAVOR = "cu117"
    } else if (VERSION.startsWith("2.0.")) {
        FLAVOR = "cu118"
    } else {
        throw new GradleException("Unsupported PyTorch version: ${VERSION}")
    }
} else if (project.hasProperty("cu10")) {
    FLAVOR = "cu102"
}
String BINARY_ROOT = "${project.buildDir}/download"

version = VERSION + (isRelease ? "" : "-SNAPSHOT")

def downloadBuild(String ver, String os, String flavor, Boolean isPrecxx11 = false, Boolean isAarch64 = false) {
    def arch = isAarch64 ? "aarch64" : "x86_64"
    exec {
        if (os == "win") {
            commandLine "${project.projectDir}/build.cmd", "${ver}", "${flavor}"
        } else {
            if (isPrecxx11) {
                commandLine 'bash', 'build.sh', "${ver}", "${flavor}", "precxx11", "${arch}"
            } else {
                commandLine 'bash', 'build.sh', "${ver}", "${flavor}", "cxx11", "${arch}"
            }
        }
    }

    // for nightly ci
    // the reason why we duplicate the folder here is to insert djl_version into the path
    // so different versions of JNI wouldn't override each other. We don't also want publishDir
    // to have djl_version as engine would require to know that during the System.load()
    String classifier = "${os}-${arch}"
    String ciDir = "${project.projectDir}/jnilib/${djl_version}/${classifier}/${flavor}"
    if (isPrecxx11) {
        ciDir = "${ciDir}-precxx11"
    }
    copy {
        def tree = fileTree(project.buildDir)
        tree.include("**/libdjl_torch.*", "**/djl_torch.dll")
        from tree.files
        into ciDir
    }
}

def downloadBuildAndroid(String ver) {
    def LIST_ABI = ["armeabi-v7a", "arm64-v8a", "x86", "x86_64"]
    LIST_ABI.each {
        abi ->
            exec {
                commandLine 'bash', 'build_android.sh', "${ver}", "${abi}"
            }
            String ciDir = "${project.projectDir}/jnilib/${djl_version}/android/${abi}"
            copy {
                from "${project.buildDir}/libdjl_torch.so"
                into ciDir
            }
            delete "${project.buildDir}/"
    }
}

def prepareNativeLib(String binaryRoot, String ver) {
    if (!System.properties['os.name'].toLowerCase(Locale.ROOT).contains("mac")) {
        throw new GradleException("This command must be run from osx")
    }

    def officialPytorchUrl = "https://download.pytorch.org/libtorch"
    def aarch64PytorchUrl = "https://djl-ai.s3.amazonaws.com/publish/pytorch"
    String cu11
    if (ver.startsWith("1.11.")) {
        cu11 = "cu113"
    } else if (ver.startsWith("1.12.")) {
        cu11 = "cu116"
    } else if (ver.startsWith("1.13.")) {
        cu11 = "cu117"
    } else if (ver.startsWith("2.0.")) {
        cu11 = "cu118"
    } else {
        throw new GradleException("Unsupported PyTorch version: ${ver}")
    }

    def files = [
            "cpu/libtorch-cxx11-abi-shared-with-deps-${ver}%2Bcpu.zip"        : "cpu/linux-x86_64",
            "cpu/libtorch-macos-${ver}.zip"                                   : "cpu/osx-x86_64",
            "cpu/libtorch-win-shared-with-deps-${ver}%2Bcpu.zip"              : "cpu/win-x86_64",
            "${cu11}/libtorch-cxx11-abi-shared-with-deps-${ver}%2B${cu11}.zip": "${cu11}/linux-x86_64",
            "${cu11}/libtorch-win-shared-with-deps-${ver}%2B${cu11}.zip"      : "${cu11}/win-x86_64",
            "cpu/libtorch-shared-with-deps-${ver}%2Bcpu.zip"                  : "cpu-precxx11/linux-x86_64",
            "${cu11}/libtorch-shared-with-deps-${ver}%2B${cu11}.zip"          : "${cu11}-precxx11/linux-x86_64"
    ]

    def aarch64Files = [
            "${ver}/libtorch-shared-with-deps-${ver}-aarch64.zip": "cpu-precxx11/linux-aarch64",
            "${ver}/libtorch-macos-${ver}-aarch64.zip"           : "cpu/osx-aarch64"
    ]

    copyNativeLibToOutputDir(files, binaryRoot, officialPytorchUrl)
    copyNativeLibToOutputDir(aarch64Files, binaryRoot, aarch64PytorchUrl)

    exec {
        commandLine 'install_name_tool', '-add_rpath', '@loader_path', "${binaryRoot}/cpu/osx-x86_64/native/lib/libtorch_cpu.dylib"
    }
    exec {
        commandLine 'install_name_tool', '-add_rpath', '@loader_path', "${binaryRoot}/cpu/osx-x86_64/native/lib/libtorch.dylib"
    }
}

def copyNativeLibToOutputDir(Map<String, String> fileStoreMap, String binaryRoot, String url) {
    fileStoreMap.each { entry ->
        project.logger.lifecycle("Downloading ${url}/${entry.key}")
        def outputDir = new File("${binaryRoot}/${entry.value}")
        def file = new File("${outputDir}/libtorch.zip")
        file.getParentFile().mkdirs()
        new URL("${url}/${entry.key}").withInputStream { i -> file.withOutputStream { it << i } }
        copy {
            from zipTree(file)
            into outputDir
        }
        // CPU dependencies
        copy {
            from("${outputDir}/libtorch/lib/") {
                include "libc10.*", "c10.dll", "libiomp5*.*", "libarm_compute*.*", "libgomp*.*", "libnvfuser_codegen.so", "libtorch.*", "libtorch_cpu.*", "torch.dll", "torch_cpu.dll", "fbgemm.dll", "asmjit.dll", "uv.dll", "nvfuser_codegen.dll"
            }
            into("${outputDir}/native/lib")
        }
        // GPU dependencies
        copy {
            from("${outputDir}/libtorch/lib/") {
                include "libtorch_cuda*.so", "torch_cuda*.dll", "libc10_cuda.so", "c10_cuda.dll", "libcaffe2_nvrtc.so", "libnvrtc*.so.*", "libcudart*.*", "*nvToolsExt*.*", "cudnn*.dll", "caffe2_nvrtc.dll", "nvrtc64*.dll", "uv.dll", "libcublas*", "zlibwapi.dll"
            }
            into("${outputDir}/native/lib")
        }
        if (entry.value.contains("-precxx11")) {
            def libstd = new File("${outputDir}/native/lib/libstdc++.so.6")
            String stdcUrl;
            if (entry.value.contains("aarch64")) {
                stdcUrl = "https://publish.djl.ai/extra/aarch64/libstdc%2B%2B.so.6"
            } else {
                stdcUrl = "https://publish.djl.ai/extra/libstdc%2B%2B.so.6"
            }
            new URL(stdcUrl).withInputStream {
                i -> libstd.withOutputStream { it << i }
            }
        }
        delete(file)
        delete("${outputDir}/libtorch")
    }
}

tasks.register('compileAndroidJNI') {
    doFirst {
        downloadBuildAndroid("${VERSION}")
    }
}

tasks.register('cleanJNI') {
    doFirst {
        delete "${project.projectDir}/build"
        delete "${project.projectDir}/libtorch"
        delete "${project.projectDir}/libtorch_android"
        delete fileTree(dir: '${project.projectDir}', include: '**.zip')
    }
}

tasks.register('compileJNI') {
    doFirst {
        // You have to use an environment with CUDA persets for Linux and Windows
        if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("windows")) {
            downloadBuild("${VERSION}", "win", "${FLAVOR}")
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("mac")) {
            downloadBuild("${VERSION}", "osx", "${FLAVOR}", false, isAarch64)
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("linux")) {
            downloadBuild("${VERSION}", "linux", "${FLAVOR}", isPrecxx11, isAarch64)
        } else {
            throw new IllegalStateException("Unknown Architecture " + System.properties['os.name'] + "-${FLAVOR}")
        }

        delete fileTree(System.getProperty("user.home") + "/.djl.ai/pytorch/") {
            include '**/*djl_torch.*'
        }
    }
}

// Create a placeholder jar without classifier to pass sonatype tests but throws an Exception if loaded
jar {
    String placeholder = "${project.buildDir}/placeholder"
    // this line is to enforce gradle to build the jar
    // otherwise it don't generate the placeholder jar at times
    // when there is no java code inside src/main
    outputs.dir file("build/libs")
    doFirst {
        def dir = file("${placeholder}/native/lib")
        dir.mkdirs()
        def propFile = file("${placeholder}/native/lib/pytorch.properties")
        propFile.text = "placeholder=true\nversion=${project.version}\n"
    }

    from placeholder
}

java {
    withJavadocJar()
    withSourcesJar()
}

formatCpp {
    exclusions = ["main/patch/**"]
}

project.tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

signing {
    required(project.hasProperty("staging") || project.hasProperty("snapshot"))
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

publishing.repositories {
    maven {
        if (project.hasProperty("snapshot")) {
            name = "snapshot"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else if (project.hasProperty("staging")) {
            name = "staging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else {
            name = "local"
            url = "build/repo"
        }
    }
}

tasks.register('downloadPyTorchNativeLib') {
    doLast {
        prepareNativeLib("${BINARY_ROOT}", "${VERSION}")
    }
}

tasks.register('uploadS3') {
    doLast {
        delete "${BINARY_ROOT}"
        prepareNativeLib("${BINARY_ROOT}", "${VERSION}")

        exec {
            commandLine "sh", "-c", "find ${BINARY_ROOT} -type f | xargs gzip"
        }

        def f = new File("${BINARY_ROOT}/files.txt")
        def uploadDirs = [
                "${BINARY_ROOT}/cpu/linux-x86_64/native/lib/",
                "${BINARY_ROOT}/cpu/osx-aarch64/native/lib/",
                "${BINARY_ROOT}/cpu/osx-x86_64/native/lib/",
                "${BINARY_ROOT}/cpu/win-x86_64/native/lib/",
                "${BINARY_ROOT}/cpu-precxx11/linux-aarch64/native/lib/",
                "${BINARY_ROOT}/cpu-precxx11/linux-x86_64/native/lib/",
                "${BINARY_ROOT}/cu118/linux-x86_64/native/lib/",
                "${BINARY_ROOT}/cu118/win-x86_64/native/lib/",
                "${BINARY_ROOT}/cu118-precxx11/linux-x86_64/native/lib/"
        ]
        uploadDirs.each { item ->
            fileTree(item).files.name.each {
                def out = item - "${BINARY_ROOT}/"
                f << out + URLEncoder.encode(it, "UTF-8")
                f << "\n"
            }
        }
        exec {
            commandLine "aws", "s3", "sync", "${BINARY_ROOT}", "s3://djl-ai/publish/pytorch/${VERSION}/"
        }
    }
}


def flavorNames = file(BINARY_ROOT).list() ?: []
flavorNames.each { flavor ->

    def platformNames = file("${BINARY_ROOT}/${flavor}").list() ?: []

    def artifactsNames = []

    platformNames.each { osName ->
        tasks.create(name: "${flavor}-${osName}Jar", type: Jar) {
            doFirst {
                def propFile = file("${BINARY_ROOT}/pytorch.properties")
                propFile.delete()
                def dsStore = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/.DS_Store")
                dsStore.delete()

                def versionName = String.format("${project.version}-%s", new Date().format('yyyyMMdd'))
                def dir = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib")
                def sb = new StringBuilder()
                sb.append("version=${versionName}\nflavor=${flavor}\nclassifier=${osName}\nlibraries=")
                def first = true
                for (String name : dir.list().sort()) {
                    if (first) {
                        first = false
                    } else {
                        sb.append(',')
                    }
                    sb.append(name)
                }
                propFile.text = sb.toString()
                def metaInf = new File("${BINARY_ROOT}/${flavor}/${osName}/META-INF")
                metaInf.mkdirs()
                def licenseFile = new File(metaInf, "LICENSE")
                licenseFile.text = new URL("https://raw.githubusercontent.com/pytorch/pytorch/master/LICENSE").text

                def binaryLicenseFile = new File(metaInf, "NOTICE")
                binaryLicenseFile.text = new URL("https://raw.githubusercontent.com/pytorch/pytorch/master/NOTICE").text

                if (flavor.contains("-precxx11")) {
                    def libstd = new File(metaInf, "ATTRIBUTION")
                    libstd.text = new URL("https://publish.djl.ai/extra/THIRD-PARTY-LICENSES_qHnMKgbdWa.txt").text
                }
            }
            from("${BINARY_ROOT}/${flavor}/${osName}/native/lib") {
                into("pytorch/${flavor}/${osName}")
            }
            from("${BINARY_ROOT}/pytorch.properties") {
                into("native/lib")
            }
            from "src/main/resources"
            archiveClassifier = "${osName}"
            archiveBaseName = "pytorch-native-${flavor}"

            manifest {
                attributes("Automatic-Module-Name": "ai.djl.pytorch_native_${flavor}_${osName}")
            }
        }
        artifactsNames.add(tasks["${flavor}-${osName}Jar"])
    }

    // Only publish if the project directory equals the current directory
    // This means that publishing from the main project does not publish the native jars
    // and the native jars have to be published separately
    if (project.getProjectDir().toString() == System.getProperty("user.dir")) {
        publishing.publications.create("${flavor}", MavenPublication) {
            artifactId "pytorch-native-${flavor}"
            from components.java
            artifacts = artifactsNames
            artifact jar
            artifact javadocJar
            artifact sourcesJar
            pom {
                name = "DJL release for PyTorch native binaries"
                description = "Deep Java Library (DJL) provided PyTorch native library binary distribution"
                url = "http://www.djl.ai/engines/pytorch/pytorch-native"
                packaging = "jar"

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                scm {
                    connection = "scm:git:git@github.com:deepjavalibrary/djl.git"
                    developerConnection = "scm:git:git@github.com:deepjavalibrary/djl.git"
                    url = "https://github.com/deepjavalibrary/djl"
                    tag = "HEAD"
                }

                developers {
                    developer {
                        name = "DJL.AI Team"
                        email = "djl-dev@amazon.com"
                        organization = "Amazon AI"
                        organizationUrl = "https://amazon.com"
                    }
                }
            }
        }
    }
}

// Gradle 8.0 requires explicitly dependency
tasks.withType(PublishToMavenRepository).configureEach {
    flavorNames.each { flavor ->
        dependsOn "sign${flavor.substring(0, 1).toUpperCase() + flavor.substring(1)}Publication"

        def platformNames = file("${BINARY_ROOT}/${flavor}").list() ?: []
        platformNames.each { osName ->
            dependsOn "${flavor}-${osName}Jar"
        }
    }
}
tasks.withType(Sign).configureEach {
    flavorNames.each { flavor ->
        def platformNames = file("${BINARY_ROOT}/${flavor}").list() ?: []
        platformNames.each { osName ->
            dependsOn "${flavor}-${osName}Jar"
        }
    }
}

clean.doFirst {
    delete "${project.projectDir}/jnilib"
    delete "${project.projectDir.getParent()}/pytorch-jni/jnilib"
}

