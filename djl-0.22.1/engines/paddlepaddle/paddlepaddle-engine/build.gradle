group "ai.djl.paddlepaddle"

dependencies {
    api project(":api")

    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
    testImplementation(project(":testing"))
}

compileJava.dependsOn(processResources)

processResources {
    outputs.dir file("${project.buildDir}/classes/java/main/jnilib")
    doLast {
        def url = "https://publish.djl.ai/paddlepaddle-${paddlepaddle_version}/jnilib"
        def files = [
                "${djl_version}/linux-x86_64/cpu/libdjl_paddle.so"         : "linux-x86_64/cpu/libdjl_paddle.so",
                "${djl_version}/osx-x86_64/cpu/libdjl_paddle.dylib"        : "osx-x86_64/cpu/libdjl_paddle.dylib",
                "${djl_version}/win-x86_64/cpu/djl_paddle.dll"             : "win-x86_64/cpu/djl_paddle.dll"
        ]
        def jnilibDir = "${project.projectDir}/jnilib/${djl_version}"
        files.each { entry ->
            def file = new File("${jnilibDir}/${entry.value}")
            if (file.exists()) {
                project.logger.lifecycle("prebuilt or cached file found for ${entry.value}")
            } else {
                def nativeDir = "${project.parent.projectDir}/paddlepaddle-native/jnilib/${djl_version}/"
                def jnilibFile = new File("${nativeDir}/${entry.value}")
                if (jnilibFile.exists()) {
                    project.logger.lifecycle("Copying " + jnilibFile)
                    copy {
                        from jnilibFile
                        into file.getParent()
                    }
                } else if (!project.hasProperty("jni")) {
                    project.logger.lifecycle("Downloading ${url}/${entry.key}")
                    file.getParentFile().mkdirs()
                    new URL("${url}/${entry.key}").withInputStream { i -> file.withOutputStream { it << i } }
                }
            }
        }
        copy {
            from jnilibDir
            into "${project.buildDir}/classes/java/main/jnilib"
        }

        // write properties
        def propFile = file("${project.buildDir}/classes/java/main/paddlepaddle-engine.properties")
        propFile.text = "djl_version=${djl_version}\npaddlepaddle_version=${paddlepaddle_version}"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "DJL Engine Adapter for PaddlePaddle"
                description = "Deep Java Library (DJL) Engine Adapter for PaddlePaddle"
                url = "http://www.djl.ai/engines/paddlepaddle/${project.name}"
            }
        }
    }
}

clean.doFirst {
    delete fileTree(System.getProperty("user.home") + "/.djl.ai/paddle/") {
        include '**/*djl_paddle.*'
    }
}
