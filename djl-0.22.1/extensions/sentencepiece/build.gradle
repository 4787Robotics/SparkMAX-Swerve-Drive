group "ai.djl.sentencepiece"

dependencies {
    api project(":api")

    testImplementation project(":testing")
    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
}

compileJava.dependsOn(processResources)

processResources {
    outputs.dir file("${project.buildDir}/classes/java/main/native/lib")
    doLast {
        def url = "https://publish.djl.ai/sentencepiece-${sentencepiece_version}/jnilib/${djl_version}"
        def files = [
                "win-x86_64"   : "sentencepiece_native.dll",
                "linux-x86_64" : "libsentencepiece_native.so",
                "linux-aarch64": "libsentencepiece_native.so",
                "osx-x86_64"   : "libsentencepiece_native.dylib",
                "osx-aarch64"  : "libsentencepiece_native.dylib",
        ]
        def jnilibDir = "${project.projectDir}/jnilib/${djl_version}"
        files.each { entry ->
            def file = new File("${jnilibDir}/${entry.key}/${entry.value}")
            if (file.exists()) {
                project.logger.lifecycle("prebuilt or cached file found for ${entry.value}")
            } else if (!project.hasProperty("jni")) {
                project.logger.lifecycle("Downloading ${url}/${entry.key}")
                file.getParentFile().mkdirs()
                def downloadPath = new URL("${url}/${entry.key}/${entry.value}")
                downloadPath.withInputStream { i -> file.withOutputStream { it << i } }
            }
        }
        copy {
            from jnilibDir
            into "${project.buildDir}/classes/java/main/native/lib"
        }

        // write properties
        def propFile = file("${project.buildDir}/classes/java/main/native/lib/sentencepiece.properties")
        propFile.text = "version=${sentencepiece_version}-${version}\n"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "DJL NLP utilities for SentencePiece"
                description = "Deep Java Library (DJL) NLP utilities for SentencePiece"
                url = "http://www.djl.ai/extensions/${project.name}"
            }
        }
    }
}

apply from: file("${rootProject.projectDir}/tools/gradle/cpp-formatter.gradle")

tasks.register('compileJNI') {
    doFirst {
        if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("win")) {
            exec {
                commandLine "${project.projectDir}/build.cmd", "v${sentencepiece_version}"
            }
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("mac")
                || System.properties['os.name'].toLowerCase(Locale.ROOT).contains("linux")) {
            def arch = System.properties["os.arch"] == "amd64" ? "x86_64" : System.properties["os.arch"]
            exec {
                commandLine "bash", "build.sh", "v${sentencepiece_version}", arch
            }
        } else {
            throw new IllegalStateException("Unknown Architecture " + System.properties['os.name'])
        }

        // for ci to upload to S3
        def ciDir = "${project.projectDir}/jnilib/${djl_version}/"
        copy {
            from "${project.buildDir}/jnilib"
            into ciDir
        }
        delete System.getProperty("user.home") + "/.djl.ai/sentencepiece"
    }
}

clean.doFirst {
    delete System.getProperty("user.home") + "/.djl.ai/sentencepiece"
}
